{
  "author": {
    "name": "EXC3L",
    "url": "https://github.com/EXC3L-ONE"
  },
  "commands": [
    {
      "cmdargs": [
        [
          "tagname",
          {
            "default": "rep.threatfox",
            "help": "The tag prefix to use.",
            "type": "str"
          }
        ]
      ],
      "descr": "Set the tag prefix used when recording ThreatFox tags. Defaults to `rep.threatfox`.",
      "name": "ex.threatfox.setup.tagprefix",
      "perms": [
        [
          "ex",
          "threatfox",
          "user"
        ]
      ],
      "storm": "init {\n    $privsep = $lib.import(ex.threatfox.privsep)\n\n    $privsep.setTagPrefix($cmdopts.tagname)\n    $lib.print(\"Changed the ThreatFox tag prefix to #{p}\", p=$privsep.getTagPrefix())\n}"
    },
    {
      "cmdargs": [
        [
          "--yield",
          {
            "action": "store_true",
            "default": false,
            "help": "Yield the newly created nodes",
            "type": "bool"
          }
        ],
        [
          "--since-days",
          {
            "default": 7,
            "help": "Specify since when the results should be ingested. Defaults the 7 days, minimum 1",
            "type": "int"
          }
        ],
        [
          "--debug",
          {
            "action": "store_true",
            "default": false,
            "help": "Show verbose debug output.",
            "type": "bool"
          }
        ],
        [
          "--no-refs",
          {
            "action": "store_true",
            "default": false,
            "help": "Do not ingest the references for ingested indicators (i.e. do not create inet:url nodes)",
            "type": "bool"
          }
        ]
      ],
      "descr": "Ingests recent IOCs from ThreatFox",
      "forms": {
        "output": [
          "inet:fqdn",
          "inet:url",
          "hash:sha256",
          "hash:md5",
          "inet:server"
        ]
      },
      "name": "ex.threatfox.ingest.indicators",
      "perms": [
        [
          "ex",
          "threatfox",
          "user"
        ]
      ],
      "storm": "init {\n    $api = $lib.import(ex.threatfox.api, debug=$lib.debug)\n    $privsep = $lib.import(ex.threatfox.privsep, debug=$lib.debug)\n}\n\n$data = $lib.false\n$data = $api.fetchIndicators($cmdopts.days_back)\n\nif ($data) {\n    divert $cmdopts.yield $privsep.parseIndicators($data, no_refs=$cmdopts.no_refs)\n}"
    },
    {
      "cmdargs": [
        [
          "--yield",
          {
            "action": "store_true",
            "default": false,
            "help": "Yield the newly created nodes",
            "type": "bool"
          }
        ],
        [
          "--debug",
          {
            "action": "store_true",
            "default": false,
            "help": "Show verbose debug output.",
            "type": "bool"
          }
        ]
      ],
      "descr": "Ingest malware family information from ThreatFox",
      "forms": {
        "output": [
          "risk:tool:software"
        ]
      },
      "name": "ex.threatfox.ingest.malware",
      "perms": [
        [
          "ex",
          "threatfox",
          "user"
        ]
      ],
      "storm": "init {\n    $api = $lib.import(ex.threatfox.api, debug=$lib.debug)\n    $privsep = $lib.import(ex.threatfox.privsep, debug=$lib.debug)\n}\n\n$data = $lib.false\n$data = $api.fetchMalwareProfiles()\n\nif ($data) {\n    divert $cmdopts.yield $privsep.parseMalwareProfiles($data)\n}"
    },
    {
      "cmdargs": [
        [
          "query",
          {
            "help": "Yield the newly created nodes instead of the inbound nodes",
            "type": "str"
          }
        ],
        [
          "--yield",
          {
            "action": "store_true",
            "default": false,
            "help": "Yield the newly created nodes instead of the inbound nodes",
            "type": "bool"
          }
        ],
        [
          "--debug",
          {
            "action": "store_true",
            "default": false,
            "help": "Show verbose debug output.",
            "type": "bool"
          }
        ],
        [
          "--no-refs",
          {
            "action": "store_true",
            "default": false,
            "help": "Do not ingest the references for ingested indicators (i.e. do not create inet:url nodes)",
            "type": "bool"
          }
        ]
      ],
      "descr": "Searches for indicators matching a user-defined query",
      "forms": {
        "output": [
          "inet:fqdn",
          "inet:url",
          "hash:sha256",
          "hash:md5",
          "inet:server"
        ]
      },
      "name": "ex.threatfox.search",
      "perms": [
        [
          "ex",
          "threatfox",
          "user"
        ]
      ],
      "storm": "init {\n    $api = $lib.import(ex.threatfox.api, debug=$lib.debug)\n    $privsep = $lib.import(ex.threatfox.privsep, debug=$lib.debug)\n}\n\nif ($cmdopts.query = $lib.false) {\n    $lib.exit(\"No query provided\")\n}\n\n$data = $lib.false\n$data = $api.enrichIndicator($cmdopts.query)\n\nif ($data) {\n    divert $cmdopts.yield $privsep.parseIndicators($data)\n}"
    },
    {
      "cmdargs": [
        [
          "--yield",
          {
            "action": "store_true",
            "default": false,
            "help": "Yield the newly created nodes instead of the inbound nodes",
            "type": "bool"
          }
        ],
        [
          "--debug",
          {
            "action": "store_true",
            "default": false,
            "help": "Show verbose debug output.",
            "type": "bool"
          }
        ],
        [
          "--no-refs",
          {
            "action": "store_true",
            "default": false,
            "help": "Do not ingest the references for ingested indicators (i.e. do not create inet:url nodes)",
            "type": "bool"
          }
        ]
      ],
      "descr": "Enriches inbound nodes with ThreatFox information",
      "forms": {
        "input": [
          "inet:fqdn",
          "inet:url",
          "hash:sha256",
          "hash:md5",
          "inet:server"
        ],
        "output": [
          "inet:fqdn",
          "inet:url",
          "hash:sha256",
          "hash:md5",
          "inet:server"
        ]
      },
      "name": "ex.threatfox.enrich",
      "perms": [
        [
          "ex",
          "threatfox",
          "user"
        ]
      ],
      "storm": "init {\n    $api = $lib.import(ex.threatfox.api, debug=$lib.debug)\n    $privsep = $lib.import(ex.threatfox.privsep, debug=$lib.debug)\n}\n\n$data = $lib.false\n$data = $api.enrichIndicator($node.repr())\n\nif ($data) {\n    divert $cmdopts.yield $privsep.parseIndicators($data)\n}"
    }
  ],
  "desc": "The ex-threatfox package provides an interface to ingest indicators and malware families from the ThreatFox API.",
  "modules": [
    {
      "name": "ex.threatfox.api",
      "storm": "$privsep = $lib.import(ex.threatfox.privsep, debug=$lib.debug)\n\n// Fetch all malware profiles from Malpedia\nfunction fetchMalwareProfiles() {\n    $post_data = ({ \"query\": \"malware_list\" })\n    return($privsep.makeMalpediaAPIRequest($post_data))\n}\n\n// Fetch all actor profiles from Malpedia\nfunction fetchIndicators(days_back) {\n    $post_data = ({ \"query\": \"get_iocs\", \"days\": $days_back })\n    return($privsep.makeMalpediaAPIRequest($post_data))\n}\n\n// Fetch all indicators from Malpedia\nfunction enrichIndicator(query) {\n    $post_data = ({ \"query\": \"search_ioc\", \"search_term\": $query })\n    return($privsep.makeMalpediaAPIRequest($post_data))\n}"
    },
    {
      "asroot:perms": [
        [
          "ex",
          "threatfox",
          "user"
        ]
      ],
      "name": "ex.threatfox.privsep",
      "storm": "function getMetaSource() {\n    [ meta:source=$lib.guid(\"threatfox\", \"ex\", \"powerup\") :name=\"threatfox\" ]\n    return($node)\n}\n\nfunction getTagPrefix() {\n    return($lib.globals.get(\"ex.threatfox:tag-prefix\", default=rep.threatfox))\n}\n\nfunction setTagPrefix(prefix) {\n    ($ok, $norm) = $lib.trycast(syn:tag:part, $prefix)\n    if (not $ok) {\n        $lib.warn(\"failed to set tag prefix, invalid value: {s}\", s=$prefix)\n        return($lib.null)\n    }\n\n    $lib.globals.set(\"ex.threatfox:tag-prefix\", $prefix)\n}\n\nfunction makethreatfoxAPIRequest(post_data) {\n\n    $url = \"https://threatfox-api.abuse.ch/api/v1/\"\n\n    $resp = $lib.inet.http.post($url, json=$post_data)\n\n    if ($resp.code != 200) { $lib.exit(\"ThreatFox API request failed with HTTP code: {code}\", code=$resp.code) }\n\n    $json = $resp.body.json()\n\n    if ($json.query_status != \"ok\") { $lib.exit(\"Something went wrong with the API query, received non-ok response: {query_status}\", query_status=$json.query_status) }\n\n    return($json)\n}\n\nfunction parseMalwareProfiles(data) {\n\n    $srcnode = $getMetaSource()\n\n    for $family in $data.data {\n        $malname = $family.0\n        $tool_node = $lib.gen.riskToolSoftware($malname, \"threatfox\")\n        $alt_names = ($family.1.malware_printable,)\n        $tag = `{$getTagPrefix()}.mal.{$malname}`\n\n        if ($family.1.malware_alias != $lib.null) {\n            $alt_names.extend($family.1.malware_alias.split(\",\"))\n        }\n        \n        [risk:tool:software=$tool_node :soft:names=($alt_names) :tag=$tag]\n\n        [<(seen)+ { yield $srcnode }]\n    }\n}\n\n\nfunction parseIndicators(data, no_refs) {\n\n    $srcnode = $getMetaSource()\n\n    for $ioc in $data.data {\n        switch $ioc.ioc_type {\n            \"domain\": { ($ok, $fqdn) = $lib.trycast(inet:fqdn, $ioc.ioc) if ($ok) { [inet:fqdn = $fqdn] } }\n            \"url\": { ($ok, $url) = $lib.trycast(inet:url, $ioc.ioc) if ($ok) { [inet:url = $url] } }\n            \"sha256_hash\": { ($ok, $sha256) = $lib.trycast(hash:sha256, $ioc.ioc) if ($ok) { [hash:sha256 = $sha256] } }\n            \"md5_hash\": { ($ok, $md5) = $lib.trycast(hash:md5, $ioc.ioc) if ($ok) { [hash:md5 = $md5] } }\n            \"ip:port\": { $val = $lib.str.concat(\"tcp://\", $ioc.ioc)  ($ok, $serv) = $lib.trycast(inet:server, $val) if ($ok) { [inet:server =  $serv]} }\n        }\n\n        if ($ioc.first_seen_utc != $lib.null) { [.seen=$ioc.first_seen_utc] }\n        if ($ioc.last_seen_utc != $lib.null) { [.seen=$ioc.last_seen_utc] }\n\n        [<(seen)+ { yield $srcnode }]\n\n        $confidence =  `{$getTagPrefix()}.confidence.{$ioc.confidence_level}`\n        [+#$confidence]\n\n        $malname = `{$getTagPrefix()}.mal.{$ioc.malware}`\n        [+#$malname]\n\n        $type = `{$getTagPrefix()}.type.{$ioc.threat_type}`\n        [+#$type]\n        \n        for $tag in $ioc.tags { ($ok, $tag) = $lib.trycast(syn:tag, $tag) if ($ok) {\n            $tag = `{$getTagPrefix()}.tag.{$tag}`\n            [+#$tag] \n        }}\n\n        if ($no_refs) { \n            return($lib.null) \n        } else {\n\n            if ($ioc.reference != \"\" and $ioc.reference != $lib.null) {\n                [<(refs)+ {[inet:url=$ioc.reference]}]\n            }\n\n            [<(refs)+ {\n                [inet:web:action=($ioc.id, $ioc.reporter)\n                    :acct={[inet:web:acct=(\"twitter.com\", $ioc.reporter)]}\n                    :act=\"Posted IOC on ThreatFox\"\n                ]\n                if ($ioc.first_seen_utc != $lib.null) {[:time=$ioc.first_seen_utc]}\n            }]\n        }\n\n    }\n}"
    }
  ],
  "name": "ex-threatfox",
  "perms": [
    {
      "desc": "Allows a user to leverage the ex-threatfox package",
      "gate": "cortex",
      "perm": [
        "ex",
        "threatfox",
        "user"
      ]
    }
  ],
  "synapse_minversion": [
    2,
    140,
    0
  ],
  "version": [
    1,
    0,
    0
  ]
}